{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jjinj\\\\OneDrive\\\\Documents\\\\GitHub\\\\karkao_test\\\\script-web\\\\src\\\\components\\\\SelectBox.tsx\";\nimport React from 'react';\nimport styled from 'styled-components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Button = styled.button`\n  background-color: #dc3545;\n  color: white;\n  border: none;\n  padding: 0.75em 1.5em;\n  border-radius: 4px;\n  cursor: pointer;\n  font-size: 1em;\n  transition: all 0.001s ease-in;\n  margin: 0 1em;\n\n  &:hover {\n    background-color: #c82333;\n  }\n\n  &:focus {\n    outline: none;\n    box-shadow: 0 0 8px rgba(220, 53, 69, 0.6);\n  }\n`;\n_c = Button;\nconst ValidateButton = ({\n  formData,\n  setErrors,\n  clusterList = []\n}) => {\n  const validate = () => {\n    const newErrors = {};\n    let isValid = true;\n\n    // 액세스 키 유효성 검사\n    if (formData.accessKey.length < 32) {\n      isValid = false;\n      newErrors.accessKey = '액세스 키는 최소 32자리여야 합니다.';\n    } else if (!/^[a-z0-9]+$/.test(formData.accessKey)) {\n      isValid = false;\n      newErrors.accessKey = '액세스 키는 소문자와 숫자로만 구성되어야 합니다.';\n    }\n\n    // 비밀 액세스 키 유효성 검사\n    if (formData.secretKey.length < 64) {\n      isValid = false;\n      newErrors.secretKey = '비밀 액세스 키는 최소 64자리여야 합니다.';\n    } else if (!/^[a-z0-9]+$/.test(formData.secretKey)) {\n      isValid = false;\n      newErrors.secretKey = '비밀 액세스 키는 소문자와 숫자로만 구성되어야 합니다.';\n    }\n\n    // 이메일 유효성 검사\n    if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(formData.email)) {\n      isValid = false;\n      newErrors.email = '유효한 이메일 형식이 아닙니다.';\n    }\n\n    // API 엔드포인트 유효성 검사\n    const apiEndpointPattern = /^https:\\/\\/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}-public\\.ke\\.kr-central-2\\.kakaocloud\\.com$/;\n    if (!apiEndpointPattern.test(formData.apiEndpoint)) {\n      isValid = false;\n      newErrors.apiEndpoint = 'API 엔드포인트 형식이 유효하지 않습니다.';\n    }\n\n    // 인증 데이터 유효성 검사\n    const authDataPattern = /^[A-Za-z0-9+/=]+$/;\n    if (!authDataPattern.test(formData.authData)) {\n      isValid = false;\n      newErrors.authData = '인증 데이터는 유효한 Base64 형식이어야 합니다.';\n    } else if (!formData.authData.endsWith('=')) {\n      isValid = false;\n      newErrors.authData = '인증 데이터는 \"=\"로 끝나야 합니다.';\n    } else {\n      try {\n        const decodedAuthData = atob(formData.authData);\n        const pemPattern = /-----BEGIN CERTIFICATE-----[\\s\\S]+-----END CERTIFICATE-----/;\n        if (!pemPattern.test(decodedAuthData)) {\n          isValid = false;\n          newErrors.authData = '인증 데이터는 유효한 PEM 형식의 인증서여야 합니다.';\n        }\n      } catch (e) {\n        isValid = false;\n        newErrors.authData = '인증 데이터를 Base64로 디코딩할 수 없습니다.';\n      }\n    }\n\n    // 프로젝트명 유효성 검사\n    if (!/^[a-z]/.test(formData.projectName)) {\n      isValid = false;\n      newErrors.projectName = '프로젝트명은 영어 소문자로 시작해야 합니다.';\n    } else if (!/^[a-z0-9-]+$/.test(formData.projectName)) {\n      isValid = false;\n      newErrors.projectName = '프로젝트명은 소문자, 숫자, \"-\"만 사용해야 합니다.';\n    } else if (formData.projectName.length < 4 || formData.projectName.length > 30) {\n      isValid = false;\n      newErrors.projectName = '프로젝트명은 4~30자리여야 합니다.';\n    }\n\n    // Primary 엔드포인트 유효성 검사\n    if (!formData.primaryEndpoint.startsWith('az-')) {\n      isValid = false;\n      newErrors.primaryEndpoint = 'Primary 엔드포인트는 az-a 또는 az-b로 시작해야 합니다.';\n    } else {\n      const primaryParts = formData.primaryEndpoint.split('.');\n      if (primaryParts.length < 6 || primaryParts[0] !== 'az-a' && primaryParts[0] !== 'az-b') {\n        isValid = false;\n        newErrors.primaryEndpoint = 'Primary 엔드포인트 형식이 유효하지 않습니다.';\n      } else if (primaryParts[1] !== 'db-les') {\n        isValid = false;\n        newErrors.primaryEndpoint = 'Primary 엔드포인트는 \"db-les\"로 시작해야 합니다.';\n      } else if (!/^[0-9a-f]{32}$/.test(primaryParts[2])) {\n        isValid = false;\n        newErrors.primaryEndpoint = 'Primary 엔드포인트의 UUID 형식이 유효하지 않습니다.';\n      } else if (primaryParts.slice(3).join('.') !== 'mysql.managed-service.kr-central-2.kakaocloud.com') {\n        isValid = false;\n        newErrors.primaryEndpoint = 'Primary 엔드포인트는 \"mysql.managed-service.kr-central-2.kakaocloud.com\"로 끝나야 합니다.';\n      }\n    }\n\n    // Standby 엔드포인트 유효성 검사\n    if (!formData.standbyEndpoint.startsWith('az-')) {\n      isValid = false;\n      newErrors.standbyEndpoint = 'Standby 엔드포인트는 az-a 또는 az-b로 시작해야 합니다.';\n    } else {\n      const standbyParts = formData.standbyEndpoint.split('.');\n      if (standbyParts.length < 6 || standbyParts[0] !== 'az-a' && standbyParts[0] !== 'az-b') {\n        isValid = false;\n        newErrors.standbyEndpoint = 'Standby 엔드포인트 형식이 유효하지 않습니다.';\n      } else if (standbyParts[1] !== 'db-les') {\n        isValid = false;\n        newErrors.standbyEndpoint = 'Standby 엔드포인트는 \"db-les\"로 시작해야 합니다.';\n      } else if (!/^[0-9a-f]{32}$/.test(standbyParts[2])) {\n        isValid = false;\n        newErrors.standbyEndpoint = 'Standby 엔드포인트의 UUID 형식이 유효하지 않습니다.';\n      } else if (standbyParts.slice(3).join('.') !== 'mysql.managed-service.kr-central-2.kakaocloud.com') {\n        isValid = false;\n        newErrors.standbyEndpoint = 'Standby 엔드포인트는 \"mysql.managed-service.kr-central-2.kakaocloud.com\"로 끝나야 합니다.';\n      }\n    }\n\n    // az-a와 az-b의 상호 검증\n    if (formData.primaryEndpoint.startsWith('az-a') && !formData.standbyEndpoint.startsWith('az-b')) {\n      isValid = false;\n      newErrors.standbyEndpoint = 'Primary 엔드포인트가 az-a로 시작하면 Standby 엔드포인트는 az-b로 시작해야 합니다.';\n    } else if (formData.primaryEndpoint.startsWith('az-b') && !formData.standbyEndpoint.startsWith('az-a')) {\n      isValid = false;\n      newErrors.standbyEndpoint = 'Primary 엔드포인트가 az-b로 시작하면 Standby 엔드포인트는 az-a로 시작해야 합니다.';\n    }\n\n    // // Docker 이미지 이름 유효성 검사\n    // if (formData.dockerImageName !== 'demo-spring-boot') {\n    //   isValid = false;\n    //   newErrors.dockerImageName = 'Docker 이미지 이름은 demo-spring-boot이어야 합니다.';\n    // }\n    //\n    // // Docker Java 버전 유효성 검사\n    // if (formData.dockerJavaVersion !== '17-jdk-slim') {\n    //   isValid = false;\n    //   newErrors.dockerJavaVersion = 'Docker Java 버전은 17-jdk-slim이어야 합니다.';\n    // }\n\n    setErrors(newErrors);\n    if (isValid) {\n      alert('모든 입력이 유효합니다.');\n    } else {\n      alert('입력에 오류가 있습니다. 각 필드를 확인하세요.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Button, {\n    onClick: validate,\n    children: \"\\uC720\\uD6A8\\uC131 \\uAC80\\uC0AC\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 188,\n    columnNumber: 10\n  }, this);\n};\n_c2 = ValidateButton;\nexport default ValidateButton;\nvar _c, _c2;\n$RefreshReg$(_c, \"Button\");\n$RefreshReg$(_c2, \"ValidateButton\");","map":{"version":3,"names":["React","styled","jsxDEV","_jsxDEV","Button","button","_c","ValidateButton","formData","setErrors","clusterList","validate","newErrors","isValid","accessKey","length","test","secretKey","email","apiEndpointPattern","apiEndpoint","authDataPattern","authData","endsWith","decodedAuthData","atob","pemPattern","e","projectName","primaryEndpoint","startsWith","primaryParts","split","slice","join","standbyEndpoint","standbyParts","alert","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","_c2","$RefreshReg$"],"sources":["C:/Users/jjinj/OneDrive/Documents/GitHub/karkao_test/script-web/src/components/SelectBox.tsx"],"sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Button = styled.button`\r\n  background-color: #dc3545;\r\n  color: white;\r\n  border: none;\r\n  padding: 0.75em 1.5em;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  font-size: 1em;\r\n  transition: all 0.001s ease-in;\r\n  margin: 0 1em;\r\n\r\n  &:hover {\r\n    background-color: #c82333;\r\n  }\r\n\r\n  &:focus {\r\n    outline: none;\r\n    box-shadow: 0 0 8px rgba(220, 53, 69, 0.6);\r\n  }\r\n`;\r\n\r\ninterface FormData {\r\n  accessKey: string;\r\n  secretKey: string;\r\n  email: string;\r\n  projectName: string;\r\n  clusterName: string;\r\n  apiEndpoint: string;\r\n  authData: string;\r\n  instanceList: string;\r\n  primaryEndpoint: string;\r\n  standbyEndpoint: string;\r\n  dockerImageName: string;\r\n  dockerJavaVersion: string;\r\n}\r\n\r\ninterface ValidateButtonProps {\r\n  formData: FormData;\r\n  setErrors: React.Dispatch<React.SetStateAction<{ [key: string]: string }>>;\r\n  clusterList: string[];\r\n}\r\n\r\nconst ValidateButton: React.FC<ValidateButtonProps> = ({ formData, setErrors, clusterList = [] }) => {\r\n  const validate = () => {\r\n    const newErrors: { [key: string]: string } = {};\r\n    let isValid = true;\r\n\r\n    // 액세스 키 유효성 검사\r\n    if (formData.accessKey.length < 32) {\r\n      isValid = false;\r\n      newErrors.accessKey = '액세스 키는 최소 32자리여야 합니다.';\r\n    } else if (!/^[a-z0-9]+$/.test(formData.accessKey)) {\r\n      isValid = false;\r\n      newErrors.accessKey = '액세스 키는 소문자와 숫자로만 구성되어야 합니다.';\r\n    }\r\n\r\n    // 비밀 액세스 키 유효성 검사\r\n    if (formData.secretKey.length < 64) {\r\n      isValid = false;\r\n      newErrors.secretKey = '비밀 액세스 키는 최소 64자리여야 합니다.';\r\n    } else if (!/^[a-z0-9]+$/.test(formData.secretKey)) {\r\n      isValid = false;\r\n      newErrors.secretKey = '비밀 액세스 키는 소문자와 숫자로만 구성되어야 합니다.';\r\n    }\r\n\r\n    // 이메일 유효성 검사\r\n    if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(formData.email)) {\r\n      isValid = false;\r\n      newErrors.email = '유효한 이메일 형식이 아닙니다.';\r\n    }\r\n\r\n    // API 엔드포인트 유효성 검사\r\n    const apiEndpointPattern = /^https:\\/\\/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}-public\\.ke\\.kr-central-2\\.kakaocloud\\.com$/;\r\n    if (!apiEndpointPattern.test(formData.apiEndpoint)) {\r\n      isValid = false;\r\n      newErrors.apiEndpoint = 'API 엔드포인트 형식이 유효하지 않습니다.';\r\n    }\r\n\r\n    // 인증 데이터 유효성 검사\r\n    const authDataPattern = /^[A-Za-z0-9+/=]+$/;\r\n    if (!authDataPattern.test(formData.authData)) {\r\n      isValid = false;\r\n      newErrors.authData = '인증 데이터는 유효한 Base64 형식이어야 합니다.';\r\n    } else if (!formData.authData.endsWith('=')) {\r\n      isValid = false;\r\n      newErrors.authData = '인증 데이터는 \"=\"로 끝나야 합니다.';\r\n    } else {\r\n      try {\r\n        const decodedAuthData = atob(formData.authData);\r\n        const pemPattern = /-----BEGIN CERTIFICATE-----[\\s\\S]+-----END CERTIFICATE-----/;\r\n        if (!pemPattern.test(decodedAuthData)) {\r\n          isValid = false;\r\n          newErrors.authData = '인증 데이터는 유효한 PEM 형식의 인증서여야 합니다.';\r\n        }\r\n      } catch (e) {\r\n        isValid = false;\r\n        newErrors.authData = '인증 데이터를 Base64로 디코딩할 수 없습니다.';\r\n      }\r\n    }\r\n\r\n    // 프로젝트명 유효성 검사\r\n    if (!/^[a-z]/.test(formData.projectName)) {\r\n      isValid = false;\r\n      newErrors.projectName = '프로젝트명은 영어 소문자로 시작해야 합니다.';\r\n    } else if (!/^[a-z0-9-]+$/.test(formData.projectName)) {\r\n      isValid = false;\r\n      newErrors.projectName = '프로젝트명은 소문자, 숫자, \"-\"만 사용해야 합니다.';\r\n    } else if (formData.projectName.length < 4 || formData.projectName.length > 30) {\r\n      isValid = false;\r\n      newErrors.projectName = '프로젝트명은 4~30자리여야 합니다.';\r\n    }\r\n\r\n    // Primary 엔드포인트 유효성 검사\r\n    if (!formData.primaryEndpoint.startsWith('az-')) {\r\n      isValid = false;\r\n      newErrors.primaryEndpoint = 'Primary 엔드포인트는 az-a 또는 az-b로 시작해야 합니다.';\r\n    } else {\r\n      const primaryParts = formData.primaryEndpoint.split('.');\r\n      if (primaryParts.length < 6 || (primaryParts[0] !== 'az-a' && primaryParts[0] !== 'az-b')) {\r\n        isValid = false;\r\n        newErrors.primaryEndpoint = 'Primary 엔드포인트 형식이 유효하지 않습니다.';\r\n      } else if (primaryParts[1] !== 'db-les') {\r\n        isValid = false;\r\n        newErrors.primaryEndpoint = 'Primary 엔드포인트는 \"db-les\"로 시작해야 합니다.';\r\n      } else if (!/^[0-9a-f]{32}$/.test(primaryParts[2])) {\r\n        isValid = false;\r\n        newErrors.primaryEndpoint = 'Primary 엔드포인트의 UUID 형식이 유효하지 않습니다.';\r\n      } else if (primaryParts.slice(3).join('.') !== 'mysql.managed-service.kr-central-2.kakaocloud.com') {\r\n        isValid = false;\r\n        newErrors.primaryEndpoint = 'Primary 엔드포인트는 \"mysql.managed-service.kr-central-2.kakaocloud.com\"로 끝나야 합니다.';\r\n      }\r\n    }\r\n\r\n    // Standby 엔드포인트 유효성 검사\r\n    if (!formData.standbyEndpoint.startsWith('az-')) {\r\n      isValid = false;\r\n      newErrors.standbyEndpoint = 'Standby 엔드포인트는 az-a 또는 az-b로 시작해야 합니다.';\r\n    } else {\r\n      const standbyParts = formData.standbyEndpoint.split('.');\r\n      if (standbyParts.length < 6 || (standbyParts[0] !== 'az-a' && standbyParts[0] !== 'az-b')) {\r\n        isValid = false;\r\n        newErrors.standbyEndpoint = 'Standby 엔드포인트 형식이 유효하지 않습니다.';\r\n      } else if (standbyParts[1] !== 'db-les') {\r\n        isValid = false;\r\n        newErrors.standbyEndpoint = 'Standby 엔드포인트는 \"db-les\"로 시작해야 합니다.';\r\n      } else if (!/^[0-9a-f]{32}$/.test(standbyParts[2])) {\r\n        isValid = false;\r\n        newErrors.standbyEndpoint = 'Standby 엔드포인트의 UUID 형식이 유효하지 않습니다.';\r\n      } else if (standbyParts.slice(3).join('.') !== 'mysql.managed-service.kr-central-2.kakaocloud.com') {\r\n        isValid = false;\r\n        newErrors.standbyEndpoint = 'Standby 엔드포인트는 \"mysql.managed-service.kr-central-2.kakaocloud.com\"로 끝나야 합니다.';\r\n      }\r\n    }\r\n\r\n    // az-a와 az-b의 상호 검증\r\n    if (formData.primaryEndpoint.startsWith('az-a') && !formData.standbyEndpoint.startsWith('az-b')) {\r\n      isValid = false;\r\n      newErrors.standbyEndpoint = 'Primary 엔드포인트가 az-a로 시작하면 Standby 엔드포인트는 az-b로 시작해야 합니다.';\r\n    } else if (formData.primaryEndpoint.startsWith('az-b') && !formData.standbyEndpoint.startsWith('az-a')) {\r\n      isValid = false;\r\n      newErrors.standbyEndpoint = 'Primary 엔드포인트가 az-b로 시작하면 Standby 엔드포인트는 az-a로 시작해야 합니다.';\r\n    }\r\n\r\n    // // Docker 이미지 이름 유효성 검사\r\n    // if (formData.dockerImageName !== 'demo-spring-boot') {\r\n    //   isValid = false;\r\n    //   newErrors.dockerImageName = 'Docker 이미지 이름은 demo-spring-boot이어야 합니다.';\r\n    // }\r\n    //\r\n    // // Docker Java 버전 유효성 검사\r\n    // if (formData.dockerJavaVersion !== '17-jdk-slim') {\r\n    //   isValid = false;\r\n    //   newErrors.dockerJavaVersion = 'Docker Java 버전은 17-jdk-slim이어야 합니다.';\r\n    // }\r\n\r\n    setErrors(newErrors);\r\n\r\n    if (isValid) {\r\n      alert('모든 입력이 유효합니다.');\r\n    } else {\r\n      alert('입력에 오류가 있습니다. 각 필드를 확인하세요.');\r\n    }\r\n  };\r\n\r\n  return <Button onClick={validate}>유효성 검사</Button>;\r\n};\r\n\r\nexport default ValidateButton;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}