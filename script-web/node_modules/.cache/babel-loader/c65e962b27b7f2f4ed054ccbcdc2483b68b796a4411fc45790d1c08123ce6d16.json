{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jjinj\\\\OneDrive\\\\Documents\\\\GitHub\\\\karkao_test\\\\script-web\\\\src\\\\components\\\\ValidateButton.tsx\";\nimport React from 'react';\nimport styled from 'styled-components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Button = styled.button`\n  background-color: #dc3545;\n  color: white;\n  border: none;\n  padding: 0.75em 1.5em;\n  border-radius: 4px;\n  cursor: pointer;\n  font-size: 1em;\n  transition: all 0.001s ease-in;\n  margin: 0 1em;\n\n  &:hover {\n    background-color: #c82333;\n  }\n\n  &:focus {\n    outline: none;\n    box-shadow: 0 0 8px rgba(220, 53, 69, 0.6);\n  }\n`;\n_c = Button;\nconst ValidateButton = ({\n  formData,\n  clusterList = []\n}) => {\n  const validate = () => {\n    let isValid = true;\n    const errors = [];\n    console.log(\"Access Key:\", formData.accessKey);\n    console.log(\"Secret Key:\", formData.secretKey);\n    const accessKeyPattern = /^[a-z0-9]{32}$/;\n    if (!formData.accessKey) {\n      isValid = false;\n      errors.push(\"사용자 액세스 키를 입력해주세요.\");\n    } else if (!accessKeyPattern.test(formData.accessKey)) {\n      isValid = false;\n      errors.push(\"사용자 액세스 키는 32자의 영숫자여야 합니다.\");\n    }\n    const secretKeyPattern = /^[a-z0-9]{70}$/;\n    if (!formData.secretKey) {\n      isValid = false;\n      errors.push(\"사용자 액세스 보안 키를 입력해주세요.\");\n    } else if (!secretKeyPattern.test(formData.secretKey)) {\n      isValid = false;\n      errors.push(\"사용자 액세스 보안 키는 70자의 영숫자여야 합니다.\");\n    }\n    const projectNamePattern = /^[a-z][a-z0-9-]{3,29}$/;\n    if (!formData.projectName) {\n      isValid = false;\n      errors.push(\"프로젝트 이름을 입력해주세요.\");\n    } else if (!projectNamePattern.test(formData.projectName)) {\n      isValid = false;\n      errors.push(\"프로젝트 이름은 영어로 시작하고, 소문자, 숫자, '-'만 입력할 수 있으며 4~30자 사이여야 합니다.\");\n    } // API로 프로젝트 존재하는지 확인\n\n    if (!formData.clusterName) {\n      isValid = false;\n      errors.push(\"클러스터 이름을 입력해주세요.\");\n    } else if (!clusterList.includes(formData.clusterName)) {\n      isValid = false;\n      errors.push(\"클러스터 이름이 유효하지 않습니다.\");\n    }\n    const apiEndpointPattern = /^https:\\/\\/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}-public\\.ke\\.kr-central-2\\.kakaocloud\\.com$/;\n    if (!formData.apiEndpoint) {\n      isValid = false;\n      errors.push(\"클러스터의 API 엔드포인트를 입력해주세요.\");\n    } else if (!apiEndpointPattern.test(formData.apiEndpoint)) {\n      isValid = false;\n      errors.push(\"클러스터의 API 엔드포인트 형식이 올바르지 않습니다.\");\n    }\n    const authDataPattern = /^[A-Za-z0-9+/=]+$/; // Base64 형식 검사\n    if (!formData.authData) {\n      isValid = false;\n      errors.push(\"클러스터의 certificate-authority-data를 입력해주세요.\");\n    } else if (!authDataPattern.test(formData.authData)) {\n      isValid = false;\n      errors.push(\"클러스터의 certificate-authority-data 형식이 올바르지 않습니다.\");\n    } else {\n      try {\n        const decodedAuthData = atob(formData.authData);\n        const pemPattern = /-----BEGIN CERTIFICATE-----[\\s\\S]+-----END CERTIFICATE-----/;\n        if (!pemPattern.test(decodedAuthData)) {\n          isValid = false;\n          errors.push(\"클러스터의 certificate-authority-data가 유효한 PEM 형식의 인증서가 아닙니다.\");\n        }\n      } catch (e) {\n        isValid = false;\n        errors.push(\"클러스터의 certificate-authority-data를 Base64로 디코딩할 수 없습니다.\");\n      }\n    }\n\n    //위에서 조회된 프로젝트명과 동일한지 체크\n    const dbEndpointPattern = /^az-[ab]\\.db-[a-z]{3}\\.[0-9a-f]{32}\\.mysql\\.managed-service\\.kr-central-2\\.kakaocloud\\.com$/;\n    if (!formData.primaryEndpoint) {\n      isValid = false;\n      errors.push(\"Primary의 엔드포인트를 입력해주세요.\");\n    } else if (!dbEndpointPattern.test(formData.primaryEndpoint)) {\n      isValid = false;\n      errors.push(\"Primary의 엔드포인트 형식이 올바르지 않습니다.\");\n    } else {\n      const primaryEndpointParts = formData.primaryEndpoint.split('.');\n      const primaryProjectName = primaryEndpointParts[2]; // UUID 위치 (ae90ddc1b6dc4b0581bb44b31f8921b5)\n\n      /*if (primaryProjectName !== formData.projectName의 UUID) {\r\n        isValid = false;\r\n        errors.push(\"DB의 프로젝트 이름이 동일하지 않습니다.\");\r\n      }*/\n    }\n\n    // db 없는 경우 '없음' 이라고 표현하기 \n    if (!formData.standbyEndpoint) {\n      isValid = false;\n      errors.push(\"Standby의 엔드포인트를 입력해주세요.\");\n    } else if (!dbEndpointPattern.test(formData.standbyEndpoint)) {\n      isValid = false;\n      errors.push(\"Standby의 엔드포인트 형식이 올바르지 않습니다.\");\n    } else {\n      const standbyEndpointParts = formData.standbyEndpoint.split('.');\n      const standbyProjectName = standbyEndpointParts[2]; // UUID 위치 (ae90ddc1b6dc4b0581bb44b31f8921b5)\n\n      /*if (standbyProjectName !== formData.projectName의 UUID) {\r\n        isValid = false;\r\n        errors.push(\"DB의 프로젝트 이름이 동일하지 않습니다.\");\r\n      }*/\n    }\n    if (!formData.dockerImageName) {\n      isValid = false;\n      errors.push(\"Docker Image 이름을 입력해주세요.\");\n    } else if (formData.dockerImageName !== \"demo-spring-boot\") {\n      isValid = false;\n      errors.push(\"Docker Image 이름은 'demo-spring-boot'이어야 합니다.\");\n    }\n    if (!formData.dockerJavaVersion) {\n      isValid = false;\n      errors.push(\"Docker Image Base Java Version을 입력해주세요.\");\n    } else if (formData.dockerJavaVersion !== \"17-jdk-slim\") {\n      isValid = false;\n      errors.push(\"Docker Image Base Java Version은 '17-jdk-slim'이어야 합니다.\");\n    }\n    if (isValid) {\n      alert('검증 완료: 입력이 올바릅니다!');\n    } else {\n      alert(`Form has errors:\\n${errors.join('\\n')}`);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Button, {\n    onClick: validate,\n    children: \"\\uC720\\uD6A8\\uC131 \\uAC80\\uC0AC\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 181,\n    columnNumber: 10\n  }, this);\n};\n_c2 = ValidateButton;\nexport default ValidateButton;\nvar _c, _c2;\n$RefreshReg$(_c, \"Button\");\n$RefreshReg$(_c2, \"ValidateButton\");","map":{"version":3,"names":["React","styled","jsxDEV","_jsxDEV","Button","button","_c","ValidateButton","formData","clusterList","validate","isValid","errors","console","log","accessKey","secretKey","accessKeyPattern","push","test","secretKeyPattern","projectNamePattern","projectName","clusterName","includes","apiEndpointPattern","apiEndpoint","authDataPattern","authData","decodedAuthData","atob","pemPattern","e","dbEndpointPattern","primaryEndpoint","primaryEndpointParts","split","primaryProjectName","standbyEndpoint","standbyEndpointParts","standbyProjectName","dockerImageName","dockerJavaVersion","alert","join","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","_c2","$RefreshReg$"],"sources":["C:/Users/jjinj/OneDrive/Documents/GitHub/karkao_test/script-web/src/components/ValidateButton.tsx"],"sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Button = styled.button`\r\n  background-color: #dc3545;\r\n  color: white;\r\n  border: none;\r\n  padding: 0.75em 1.5em;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  font-size: 1em;\r\n  transition: all 0.001s ease-in;\r\n  margin: 0 1em;\r\n\r\n  &:hover {\r\n    background-color: #c82333;\r\n  }\r\n\r\n  &:focus {\r\n    outline: none;\r\n    box-shadow: 0 0 8px rgba(220, 53, 69, 0.6);\r\n  }\r\n`;\r\n\r\ninterface FormData {\r\n  accessKey: string;\r\n  secretKey: string;\r\n  email: string;\r\n  projectName: string;\r\n  clusterName: string;\r\n  apiEndpoint: string;\r\n  authData: string;\r\n  instanceList: string;\r\n  primaryEndpoint: string;\r\n  standbyEndpoint: string;\r\n  dockerImageName: string;\r\n  dockerJavaVersion: string;\r\n}\r\n\r\ninterface ValidateButtonProps {\r\n  formData: FormData;\r\n  clusterList: string[];\r\n}\r\n\r\nconst ValidateButton: React.FC<ValidateButtonProps> = ({ formData, clusterList = []}) => {\r\n  const validate = () => {\r\n    let isValid = true;\r\n    const errors: string[] = [];\r\n\r\n    console.log(\"Access Key:\", formData.accessKey);\r\n    console.log(\"Secret Key:\", formData.secretKey);\r\n\r\n    const accessKeyPattern = /^[a-z0-9]{32}$/;\r\n    if (!formData.accessKey) {\r\n      isValid = false;\r\n      errors.push(\"사용자 액세스 키를 입력해주세요.\");\r\n    } else if (!accessKeyPattern.test(formData.accessKey)) {\r\n      isValid = false;\r\n      errors.push(\"사용자 액세스 키는 32자의 영숫자여야 합니다.\");\r\n    }\r\n\r\n    const secretKeyPattern = /^[a-z0-9]{70}$/;\r\n    if (!formData.secretKey) {\r\n      isValid = false;\r\n      errors.push(\"사용자 액세스 보안 키를 입력해주세요.\");\r\n    } else if (!secretKeyPattern.test(formData.secretKey)) {\r\n      isValid = false;\r\n      errors.push(\"사용자 액세스 보안 키는 70자의 영숫자여야 합니다.\");\r\n    }\r\n\r\n    const projectNamePattern = /^[a-z][a-z0-9-]{3,29}$/;\r\n    if (!formData.projectName) {\r\n      isValid = false;\r\n      errors.push(\"프로젝트 이름을 입력해주세요.\");\r\n    } else if (!projectNamePattern.test(formData.projectName)) {\r\n      isValid = false;\r\n      errors.push(\"프로젝트 이름은 영어로 시작하고, 소문자, 숫자, '-'만 입력할 수 있으며 4~30자 사이여야 합니다.\")\r\n    } // API로 프로젝트 존재하는지 확인\r\n  \r\n\r\n    if (!formData.clusterName) {\r\n      isValid = false;\r\n      errors.push(\"클러스터 이름을 입력해주세요.\");\r\n    } else if (!clusterList.includes(formData.clusterName)) {\r\n      isValid = false;\r\n      errors.push(\"클러스터 이름이 유효하지 않습니다.\");\r\n    }\r\n\r\n    const apiEndpointPattern = /^https:\\/\\/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}-public\\.ke\\.kr-central-2\\.kakaocloud\\.com$/;\r\n    if (!formData.apiEndpoint) {\r\n      isValid = false;\r\n      errors.push(\"클러스터의 API 엔드포인트를 입력해주세요.\");\r\n    } else if (!apiEndpointPattern.test(formData.apiEndpoint)) {\r\n      isValid = false;\r\n      errors.push(\"클러스터의 API 엔드포인트 형식이 올바르지 않습니다.\");\r\n    }\r\n\r\n    const authDataPattern = /^[A-Za-z0-9+/=]+$/; // Base64 형식 검사\r\n    if (!formData.authData) {\r\n      isValid = false;\r\n      errors.push(\"클러스터의 certificate-authority-data를 입력해주세요.\");\r\n    } else if (!authDataPattern.test(formData.authData)) {\r\n      isValid = false;\r\n      errors.push(\"클러스터의 certificate-authority-data 형식이 올바르지 않습니다.\");\r\n    } else {\r\n      try {\r\n        const decodedAuthData = atob(formData.authData);\r\n        const pemPattern = /-----BEGIN CERTIFICATE-----[\\s\\S]+-----END CERTIFICATE-----/;\r\n        if (!pemPattern.test(decodedAuthData)) {\r\n          isValid = false;\r\n          errors.push(\"클러스터의 certificate-authority-data가 유효한 PEM 형식의 인증서가 아닙니다.\");\r\n        }\r\n      } catch (e) {\r\n        isValid = false;\r\n        errors.push(\"클러스터의 certificate-authority-data를 Base64로 디코딩할 수 없습니다.\");\r\n      }\r\n    }\r\n\r\n    //위에서 조회된 프로젝트명과 동일한지 체크\r\n    const dbEndpointPattern = /^az-[ab]\\.db-[a-z]{3}\\.[0-9a-f]{32}\\.mysql\\.managed-service\\.kr-central-2\\.kakaocloud\\.com$/;\r\n\r\n    if (!formData.primaryEndpoint) {\r\n      isValid = false;\r\n      errors.push(\"Primary의 엔드포인트를 입력해주세요.\");\r\n    } else if (!dbEndpointPattern.test(formData.primaryEndpoint)) {\r\n      isValid = false;\r\n      errors.push(\"Primary의 엔드포인트 형식이 올바르지 않습니다.\");\r\n    } else {\r\n      const primaryEndpointParts = formData.primaryEndpoint.split('.');\r\n      const primaryProjectName = primaryEndpointParts[2]; // UUID 위치 (ae90ddc1b6dc4b0581bb44b31f8921b5)\r\n\r\n      /*if (primaryProjectName !== formData.projectName의 UUID) {\r\n        isValid = false;\r\n        errors.push(\"DB의 프로젝트 이름이 동일하지 않습니다.\");\r\n      }*/\r\n    }\r\n\r\n\r\n    // db 없는 경우 '없음' 이라고 표현하기 \r\n    if (!formData.standbyEndpoint) {\r\n      isValid = false;\r\n      errors.push(\"Standby의 엔드포인트를 입력해주세요.\");\r\n    } else if (!dbEndpointPattern.test(formData.standbyEndpoint)) {\r\n      isValid = false;\r\n      errors.push(\"Standby의 엔드포인트 형식이 올바르지 않습니다.\");\r\n    } else {\r\n      const standbyEndpointParts = formData.standbyEndpoint.split('.');\r\n      const standbyProjectName = standbyEndpointParts[2]; // UUID 위치 (ae90ddc1b6dc4b0581bb44b31f8921b5)\r\n\r\n      /*if (standbyProjectName !== formData.projectName의 UUID) {\r\n        isValid = false;\r\n        errors.push(\"DB의 프로젝트 이름이 동일하지 않습니다.\");\r\n      }*/\r\n    }\r\n\r\n\r\n\r\n    if (!formData.dockerImageName) {\r\n      isValid = false;\r\n      errors.push(\"Docker Image 이름을 입력해주세요.\");\r\n    } else if (formData.dockerImageName !== \"demo-spring-boot\") {\r\n      isValid = false;\r\n      errors.push(\"Docker Image 이름은 'demo-spring-boot'이어야 합니다.\");\r\n    }\r\n\r\n    if (!formData.dockerJavaVersion) {\r\n      isValid = false;\r\n      errors.push(\"Docker Image Base Java Version을 입력해주세요.\");\r\n    } else if (formData.dockerJavaVersion !== \"17-jdk-slim\") {\r\n      isValid = false;\r\n      errors.push(\"Docker Image Base Java Version은 '17-jdk-slim'이어야 합니다.\");\r\n    }\r\n\r\n    if (isValid) {\r\n      alert('검증 완료: 입력이 올바릅니다!');\r\n    } else {\r\n      alert(`Form has errors:\\n${errors.join('\\n')}`);\r\n    }\r\n  };\r\n\r\n  return <Button onClick={validate}>유효성 검사</Button>;\r\n};\r\n\r\nexport default ValidateButton;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}