{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\TFX255GS\\\\Desktop\\\\script-web\\\\src\\\\components\\\\ValidateButton.tsx\";\nimport React from 'react';\nimport styled from 'styled-components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Button = styled.button`\n  background-color: #dc3545;\n    color: white;\n    border: none;\n    padding: 0.75em 1.5em;\n    border-radius: 4px;\n    cursor: pointer;\n    font-size: 1em;\n    transition: all 0.001s ease-in;\n    margin: 0 1em;\n\n  &:hover {\n    background-color: #c82333;\n  }\n\n  &:focus {\n    outline: none;\n    box-shadow: 0 0 8px rgba(220, 53, 69, 0.6);\n  }\n`;\n_c = Button;\nconst ValidateButton = ({\n  formData\n}) => {\n  const validate = () => {\n    let isValid = true;\n    const errors = [];\n    if (!formData.accessKey) {\n      isValid = false;\n      errors.push(\"사용자 액세스 키를 입력해주세요.\");\n    }\n    if (!formData.secretKey) {\n      isValid = false;\n      errors.push(\"사용자 액세스 보안 키를 입력해주세요.\");\n    }\n    if (!formData.email) {\n      isValid = false;\n      errors.push(\"사용자 이메일을 입력해주세요.\");\n    }\n    if (!formData.projectName) {\n      isValid = false;\n      errors.push(\"프로젝트 이름을 입력해주세요.\");\n    }\n    // 추가적인 검증 로직을 여기에 추가할 수 있습니다.\n\n    if (!formData.clusterName) {\n      isValid = false;\n      errors.push(\"클러스터 이름을 입력해주세요.\");\n    }\n    if (!formData.apiEndpoint) {\n      isValid = false;\n      errors.push(\"클러스터의 API 엔드포인트를 입력해주세요.\");\n    }\n    if (!formData.authData) {\n      isValid = false;\n      errors.push(\"클러스터의 certificate-authority-data를 입력해주세요.\");\n    }\n    if (!formData.primaryEndpoint) {\n      isValid = false;\n      errors.push(\"Primary의 엔드포인트를 입력해주세요.\");\n    }\n    if (!formData.standbyEndpoint) {\n      isValid = false;\n      errors.push(\"Standby의 엔드포인트를 입력해주세요.\");\n    }\n    if (!formData.dockerImageName) {\n      isValid = false;\n      errors.push(\"Docker Image 이름을 입력해주세요.\");\n    }\n    if (!formData.dockerJavaVersion) {\n      isValid = false;\n      errors.push(\"Docker Image Base Java Version을 입력해주세요.\");\n    }\n    if (isValid) {\n      alert('Form is valid!');\n    } else {\n      alert(`Form has errors:\\n${errors.join('\\n')}`);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Button, {\n    onClick: validate,\n    children: \"\\uC720\\uD6A8\\uC131 \\uAC80\\uC0AC\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 10\n  }, this);\n};\n_c2 = ValidateButton;\nexport default ValidateButton;\nvar _c, _c2;\n$RefreshReg$(_c, \"Button\");\n$RefreshReg$(_c2, \"ValidateButton\");","map":{"version":3,"names":["React","styled","jsxDEV","_jsxDEV","Button","button","_c","ValidateButton","formData","validate","isValid","errors","accessKey","push","secretKey","email","projectName","clusterName","apiEndpoint","authData","primaryEndpoint","standbyEndpoint","dockerImageName","dockerJavaVersion","alert","join","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","_c2","$RefreshReg$"],"sources":["C:/Users/TFX255GS/Desktop/script-web/src/components/ValidateButton.tsx"],"sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Button = styled.button`\r\n  background-color: #dc3545;\r\n    color: white;\r\n    border: none;\r\n    padding: 0.75em 1.5em;\r\n    border-radius: 4px;\r\n    cursor: pointer;\r\n    font-size: 1em;\r\n    transition: all 0.001s ease-in;\r\n    margin: 0 1em;\r\n\r\n  &:hover {\r\n    background-color: #c82333;\r\n  }\r\n\r\n  &:focus {\r\n    outline: none;\r\n    box-shadow: 0 0 8px rgba(220, 53, 69, 0.6);\r\n  }\r\n`;\r\n\r\ninterface ValidateButtonProps {\r\n  formData: {\r\n    accessKey: string;\r\n    secretKey: string;\r\n    email: string;\r\n    projectName: string;\r\n    clusterList: string;\r\n    clusterName: string;\r\n    apiEndpoint: string;\r\n    authData: string;\r\n    instanceList: string;\r\n    primaryEndpoint: string;\r\n    standbyEndpoint: string;\r\n    dockerImageName: string;\r\n    dockerJavaVersion: string;\r\n  };\r\n}\r\n\r\nconst ValidateButton: React.FC<ValidateButtonProps> = ({ formData }) => {\r\n  const validate = () => {\r\n    let isValid = true;\r\n    const errors = [];\r\n\r\n    if (!formData.accessKey) {\r\n      isValid = false;\r\n      errors.push(\"사용자 액세스 키를 입력해주세요.\");\r\n    }\r\n    if (!formData.secretKey) {\r\n      isValid = false;\r\n      errors.push(\"사용자 액세스 보안 키를 입력해주세요.\");\r\n    }\r\n    if (!formData.email) {\r\n      isValid = false;\r\n      errors.push(\"사용자 이메일을 입력해주세요.\");\r\n\r\n    }\r\n    if (!formData.projectName) {\r\n      isValid = false;\r\n      errors.push(\"프로젝트 이름을 입력해주세요.\");\r\n    }\r\n    // 추가적인 검증 로직을 여기에 추가할 수 있습니다.\r\n\r\n    if (!formData.clusterName) {\r\n        isValid = false;\r\n        errors.push(\"클러스터 이름을 입력해주세요.\");\r\n      }\r\n    \r\n    if (!formData.apiEndpoint) {\r\n        isValid = false;\r\n        errors.push(\"클러스터의 API 엔드포인트를 입력해주세요.\");\r\n    }\r\n\r\n    if (!formData.authData) {\r\n        isValid = false;\r\n        errors.push(\"클러스터의 certificate-authority-data를 입력해주세요.\");\r\n    }\r\n\r\n    if (!formData.primaryEndpoint) {\r\n        isValid = false;\r\n        errors.push(\"Primary의 엔드포인트를 입력해주세요.\");\r\n    }\r\n\r\n    if (!formData.standbyEndpoint) {\r\n        isValid = false;\r\n        errors.push(\"Standby의 엔드포인트를 입력해주세요.\");\r\n    }\r\n\r\n    if (!formData.dockerImageName) {\r\n        isValid = false;\r\n        errors.push(\"Docker Image 이름을 입력해주세요.\");\r\n    }\r\n\r\n    if (!formData.dockerJavaVersion) {\r\n        isValid = false;\r\n        errors.push(\"Docker Image Base Java Version을 입력해주세요.\");\r\n    }\r\n      \r\n\r\n    if (isValid) {\r\n      alert('Form is valid!');\r\n    } else {\r\n      alert(`Form has errors:\\n${errors.join('\\n')}`);\r\n    }\r\n  };\r\n\r\n  return <Button onClick={validate}>유효성 검사</Button>;\r\n};\r\n\r\nexport default ValidateButton;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvC,MAAMC,MAAM,GAAGH,MAAM,CAACI,MAAM;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAACC,EAAA,GAnBIF,MAAM;AAuCZ,MAAMG,cAA6C,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EACtE,MAAMC,QAAQ,GAAGA,CAAA,KAAM;IACrB,IAAIC,OAAO,GAAG,IAAI;IAClB,MAAMC,MAAM,GAAG,EAAE;IAEjB,IAAI,CAACH,QAAQ,CAACI,SAAS,EAAE;MACvBF,OAAO,GAAG,KAAK;MACfC,MAAM,CAACE,IAAI,CAAC,oBAAoB,CAAC;IACnC;IACA,IAAI,CAACL,QAAQ,CAACM,SAAS,EAAE;MACvBJ,OAAO,GAAG,KAAK;MACfC,MAAM,CAACE,IAAI,CAAC,uBAAuB,CAAC;IACtC;IACA,IAAI,CAACL,QAAQ,CAACO,KAAK,EAAE;MACnBL,OAAO,GAAG,KAAK;MACfC,MAAM,CAACE,IAAI,CAAC,kBAAkB,CAAC;IAEjC;IACA,IAAI,CAACL,QAAQ,CAACQ,WAAW,EAAE;MACzBN,OAAO,GAAG,KAAK;MACfC,MAAM,CAACE,IAAI,CAAC,kBAAkB,CAAC;IACjC;IACA;;IAEA,IAAI,CAACL,QAAQ,CAACS,WAAW,EAAE;MACvBP,OAAO,GAAG,KAAK;MACfC,MAAM,CAACE,IAAI,CAAC,kBAAkB,CAAC;IACjC;IAEF,IAAI,CAACL,QAAQ,CAACU,WAAW,EAAE;MACvBR,OAAO,GAAG,KAAK;MACfC,MAAM,CAACE,IAAI,CAAC,0BAA0B,CAAC;IAC3C;IAEA,IAAI,CAACL,QAAQ,CAACW,QAAQ,EAAE;MACpBT,OAAO,GAAG,KAAK;MACfC,MAAM,CAACE,IAAI,CAAC,2CAA2C,CAAC;IAC5D;IAEA,IAAI,CAACL,QAAQ,CAACY,eAAe,EAAE;MAC3BV,OAAO,GAAG,KAAK;MACfC,MAAM,CAACE,IAAI,CAAC,yBAAyB,CAAC;IAC1C;IAEA,IAAI,CAACL,QAAQ,CAACa,eAAe,EAAE;MAC3BX,OAAO,GAAG,KAAK;MACfC,MAAM,CAACE,IAAI,CAAC,yBAAyB,CAAC;IAC1C;IAEA,IAAI,CAACL,QAAQ,CAACc,eAAe,EAAE;MAC3BZ,OAAO,GAAG,KAAK;MACfC,MAAM,CAACE,IAAI,CAAC,0BAA0B,CAAC;IAC3C;IAEA,IAAI,CAACL,QAAQ,CAACe,iBAAiB,EAAE;MAC7Bb,OAAO,GAAG,KAAK;MACfC,MAAM,CAACE,IAAI,CAAC,yCAAyC,CAAC;IAC1D;IAGA,IAAIH,OAAO,EAAE;MACXc,KAAK,CAAC,gBAAgB,CAAC;IACzB,CAAC,MAAM;MACLA,KAAK,CAAC,qBAAqBb,MAAM,CAACc,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;IACjD;EACF,CAAC;EAED,oBAAOtB,OAAA,CAACC,MAAM;IAACsB,OAAO,EAAEjB,QAAS;IAAAkB,QAAA,EAAC;EAAM;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAQ,CAAC;AACnD,CAAC;AAACC,GAAA,GApEIzB,cAA6C;AAsEnD,eAAeA,cAAc;AAAC,IAAAD,EAAA,EAAA0B,GAAA;AAAAC,YAAA,CAAA3B,EAAA;AAAA2B,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}